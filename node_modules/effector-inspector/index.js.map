{"version":3,"file":"index.js","sources":["src/components.ts","src/setting.ts","src/tabs.ts","src/object-view.ts","src/trim-domain.ts","src/logs.ts","src/stores.ts","src/events.ts","src/effects.ts","src/files.ts","src/traces.ts","src/view.ts","src/index.ts"],"sourcesContent":["import {Spec, styled} from 'foliage';\nimport {spec} from 'forest';\n\nexport const Container = styled.div`\n  --primary: #ff8c00;\n  --primary-light: #ffb152;\n  --primary-dark: #c86e00;\n  --primary-text: #fff;\n\n  --text: #404040;\n  --border: #dadada;\n  --shadow: 0 4px 20px 4px rgba(0, 0, 0, 0.1);\n\n  --scrollbar: var(--primary-light);\n\n  --tabs-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);\n\n  --tab-bg: #fff;\n  --tab-text: #606060;\n  --tab-text-active: var(--primary);\n  --tab-shadow-active: var(--primary);\n\n  --content-bg: #f9f9f9;\n\n  --code-var: #ff8c00;\n  --code-func: #249ec6;\n  --code-string: #00a153;\n  --code-bool: #ff62d3;\n  --code-number: #7a70f3;\n  --code-date: #333;\n  --code-regexp: #95b70e;\n\n  @media (prefers-color-scheme: dark) {\n    --text: #ddd;\n    --border: #111;\n    --shadow: 0 4px 20px 4px rgba(0, 0, 0, 0.1);\n\n    --scrollbar: var(--primary);\n\n    --tabs-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n\n    --tab-bg: #444;\n    --tab-text: #ddd;\n    --tab-text-active: var(--primary);\n    --tab-shadow-active: var(--primary);\n\n    --content-bg: #333;\n\n    --code-var: #ff8c00;\n    --code-func: #a5d4e2;\n    --code-string: #2cb472;\n    --code-bool: #ff62d3;\n    --code-number: #9990ff;\n    --code-date: #fff;\n    --code-regexp: #e5ff7e;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background-color: var(--scrollbar);\n  }\n\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar:horizontal {\n    height: 6px;\n  }\n\n  position: fixed;\n  top: 64px;\n  right: 64px;\n  bottom: 64px;\n  z-index: 1000;\n\n  display: flex;\n  flex-direction: row;\n  width: 736px;\n  min-width: 400px;\n  max-width: 90%;\n\n  color: var(--text);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Apple Color Emoji',\n    'Segoe UI Emoji', 'Segoe UI Symbol', 'PT Sans', Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n\n  background-color: var(--bg);\n  border-radius: 8px;\n  box-shadow: var(--shadow);\n\n  user-select: none;\n\n  color-scheme: light dark;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n\n  @media screen and (max-width: 700px) {\n    max-width: 480px;\n  }\n`;\n\nexport const DragHandler = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 8px;\n  margin-top: 48px;\n  margin-bottom: 48px;\n  margin-left: -10px;\n\n  color: var(--primary);\n  font-size: 14px;\n  font-family: monospace;\n  line-height: 6px;\n  word-break: break-all;\n\n  background-color: var(--bg);\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n  cursor: col-resize;\n\n  &:hover,\n  &[data-active='true'] {\n    color: var(--bg);\n\n    background-color: var(--primary);\n  }\n`;\n\nexport const Section = styled.section`\n  position: relative;\n\n  display: flex;\n  flex-flow: column;\n  width: 100%;\n\n  border-radius: inherit;\n`;\n\nexport const SectionHead = styled.div`\n  position: sticky;\n  top: 0;\n  right: 0;\n  left: 0;\n\n  display: flex;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 20px;\n\n  background-color: var(--tab-bg);\n  border-bottom: 1px solid var(--border);\n  border-radius: inherit;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n  box-shadow: var(--tabs-shadow);\n`;\n\nexport const SectionTab = styled.div`\n  padding: 8px 16px;\n\n  color: var(--tab-text);\n\n  border-radius: inherit;\n  border-top-right-radius: 0;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: inset 0 -2px 0 0 var(--tab-shadow-active);\n  }\n\n  &:not(:first-child) {\n    border-top-left-radius: 0;\n  }\n\n  &[data-active='true'] {\n    color: var(--tab-text-active);\n\n    box-shadow: inset 0 -2px 0 0 var(--tab-shadow-active);\n  }\n`;\n\nexport const SectionContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  overflow-y: auto;\n\n  background-color: var(--content-bg);\n`;\n\nexport const NodeList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin: 0 0;\n  padding: 0 0;\n  overflow-x: auto;\n\n  list-style-type: none;\n`;\n\nexport const Node = styled.li`\n  display: flex;\n  margin: 0 0;\n  padding: 6px 10px;\n\n  font-size: 12px;\n  line-height: 1.3;\n`;\n\nexport const NodeTitle = styled.pre`\n  display: flex;\n  margin: 0 0;\n\n  color: var(--code-var);\n  font-family: 'JetBrains Mono', hasklig, monofur, monospace;\n`;\n\nexport const NodeContent = styled.pre`\n  margin: 0 0;\n\n  color: var(--code-func);\n  font-family: 'JetBrains Mono', hasklig, monofur, monospace;\n`;\n\nexport const NodeButton = styled.button`\n  margin: 0;\n  margin-left: 1rem;\n  padding: 0.2rem 0.4rem;\n\n  color: var(--primary-text);\n  font-family: 'JetBrains Mono', hasklig, monofur, monospace;\n\n  background-color: var(--primary);\n  border: var(--primary);\n  border-radius: 4px;\n\n  &:focus {\n    outline: 0;\n    box-shadow: 0 0 0 1px var(--primary-dark), 0 0 3px 0 var(--primary-dark);\n  }\n\n  &:hover {\n    background-color: var(--primary-dark);\n  }\n`;\n\nexport const ListItem = styled.span`\n  display: inline-block;\n\n  [data-opened='true'] > & {\n    display: block;\n    padding-left: 8px;\n  }\n\n  &[data-hidden='folded'] {\n    display: none;\n\n    [data-opened='true'] > & {\n      display: block;\n    }\n  }\n\n  &[data-hidden='expanded'] {\n    display: inline-block;\n\n    [data-opened='true'] > & {\n      display: none;\n    }\n  }\n\n  &:not(:last-child)::after {\n    content: ', ';\n  }\n`;\n\nconst boolean = styled.span`\n  color: var(--code-bool);\n  font-style: italic;\n`;\n\nconst number = styled.span`\n  color: var(--code-number);\n`;\n\nconst string = styled.span`\n  color: var(--code-string);\n`;\n\nconst nullable = styled.span`\n  color: var(--code-number);\n  font-weight: bold;\n`;\n\nconst date = styled.span`\n  color: var(--code-date);\n`;\n\nconst symbol = styled.span`\n  /* nothing here */\n`;\n\nconst regexp = styled.span`\n  color: var(--code-regexp);\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  * + * {\n    margin-left: 0.5rem;\n  }\n`;\n\nexport const Content = {\n  boolean,\n  date,\n  keyword: nullable,\n  number,\n  string,\n  symbol,\n  regexp,\n};\n\nexport const Panel = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  padding: 1rem;\n`;\n\nconst Check = styled.input`\n  /* nothing here */\n`;\n\nconst Label = styled.label`\n  display: flex;\n  flex-shrink: 0;\n  padding: 0 0.5rem;\n`;\n\nexport const Input = styled.input`\n  display: flex;\n  flex-shrink: 0;\n  margin: 0 0.5rem;\n  padding: 0 0.5rem;\n\n  border: 1px solid var(--border);\n  border-radius: 0.2rem;\n\n  &:focus {\n    border-color: var(--primary);\n    outline: 0;\n    box-shadow: 0 0 0 1px var(--primary);\n  }\n`;\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Checkbox = (arg: Spec & { title: string }) => {\n  const { title, ...config } = arg;\n\n  Label(() => {\n    Check(() => {\n      spec({ attr: { type: 'checkbox' } });\n      spec(config);\n    });\n    spec({ text: title });\n  });\n};\n\nexport const Select = styled.select``;\n\nexport const Search = styled.input`\n  display: flex;\n  flex-shrink: 0;\n  padding: 0 0.5rem;\n  border: 1px solid var(--border);\n  border-radius: 0.2rem;\n  margin-bottom: 1rem;\n  font-size: 1rem;\n  line-height: 2rem;\n\n  &:focus {\n    border-color: var(--primary);\n    outline: 0;\n    box-shadow: 0 0 0 2px var(--primary);\n  }\n`;\n","import { createEvent } from 'effector';\n\nconst PREFIX = (0xeffec ** 2).toString(36);\n\nfunction read(name: string, defaultValue: string): string {\n  return localStorage.getItem(`${PREFIX}-${name}`) ?? defaultValue;\n}\n\nfunction write(name: string, value: string): string {\n  localStorage.setItem(`${PREFIX}-${name}`, value);\n  return value;\n}\n\nexport function createSetting(name: string, defaultValue: string) {\n  const save = createEvent<string>();\n  save.watch((value) => write(name, value));\n  return {\n    read: () => read(name, defaultValue),\n    write: (value: string) => write(name, value),\n    save,\n  };\n}\n\nexport function createJsonSetting<T>(name: string, defaultValue: T) {\n  const save = createEvent<T>();\n  save.watch((value) => write(name, JSON.stringify(value)));\n  return {\n    read: (): T => JSON.parse(read(name, JSON.stringify(defaultValue))),\n    write: (value: T): T => {\n      write(name, JSON.stringify(value));\n      return value;\n    },\n    save,\n  };\n}\n","import { Store, Event, createEvent, restore } from 'effector';\nimport { Section, SectionHead, SectionTab, SectionContent } from './components';\nimport { createSetting } from './setting';\n\ntype TabConfig<T> = {\n  title: string | Store<string>;\n  fn: (_: { changeTab: Event<T> }) => void;\n};\ntype TabsConfig<Keys extends string> = Record<Keys, TabConfig<Keys>>;\n\nexport function Tabs<Keys extends string>(tabs: TabsConfig<Keys>) {\n  const tabList = Object.keys(tabs) as Keys[];\n  const firstTab = tabList[0];\n\n  const lastTab = createSetting('last-tab', firstTab);\n  const savedTab = lastTab.read() as Keys;\n  const initialTab = tabList.includes(savedTab) ? savedTab : firstTab;\n\n  const changeTab = createEvent<Keys>();\n  const $tab = restore(changeTab, initialTab);\n\n  $tab.watch(lastTab.write);\n\n  Section(() => {\n    SectionHead(() => {\n      for (const key of tabList) {\n        const tab = tabs[key];\n\n        SectionTab({\n          text: tab.title,\n          data: {\n            active: $tab.map((current) => current === key),\n          },\n          handler: { click: changeTab.prepend(() => key) },\n        });\n      }\n    });\n    for (const key of tabList) {\n      const tab = tabs[key];\n\n      SectionContent({\n        visible: $tab.map((current) => current === key),\n        fn() {\n          tab.fn({ changeTab });\n        },\n      });\n    }\n  });\n}\n","import { Store, createEvent, createStore, combine } from 'effector';\nimport { list, h, variant, spec, rec, handler, remap } from 'forest';\n\nimport { Content, ListItem } from './components';\n\nconst typeRegexp = /\\[object ([\\w\\s]+)\\]/;\n\nfunction getType(value: unknown): 'unknown' | string {\n  const typeString = Object.prototype.toString.call(value);\n  const match = typeRegexp.exec(typeString);\n  return match ? match[1] : 'unknown';\n}\n\nexport function ObjectView<T extends any>(_: { value: Store<T> }): void {\n  const Value = rec<{ value: any; key: string; parentOpened: boolean }>(({ store: $props }) => {\n    const [$value, $parentOpened] = remap($props, ['value', 'parentOpened']);\n\n    const foldableClicked = createEvent<MouseEvent>();\n    const $localOpened = createStore(false).on(foldableClicked, (opened) => !opened);\n\n    const $opened = combine($parentOpened, $localOpened, (parent, local) =>\n      parent === true ? local : false,\n    );\n\n    variant({\n      source: combine($value, $opened, (value, opened) => ({\n        type: getType(value),\n        value,\n        opened,\n      })),\n      key: 'type',\n      cases: {\n        //#region\n        String: ({ store }) => Content.string({ text: ['\"', remap(store, 'value'), '\"'] }),\n        Number: ({ store }) => Content.number({ text: remap(store, 'value') }),\n        BigInt: ({ store }) =>\n          Content.number({\n            text: [remap(store, 'value'), 'n'],\n            attr: { title: 'BigInt' },\n          }),\n        Boolean: ({ store }) => Content.boolean({ text: remap(store, 'value') }),\n        Null: () => Content.keyword({ text: 'null' }),\n        Undefined: () => Content.keyword({ text: 'undefined' }),\n        Symbol: ({ store }) => Content.symbol({ text: remap(store, 'value') }),\n\n        RegExp({ store: $variantSource }) {\n          const $value = remap($variantSource, 'value') as Store<RegExp>;\n          const [$source, $flags] = remap($value, ['source', 'flags']);\n\n          Content.regexp({ text: ['/', $source, '/', $flags] });\n        },\n\n        Function({ store: $variantSource }) {\n          const $value = remap($variantSource, 'value') as Store<Function>;\n          const attr = { title: $value.map((ƒ) => ƒ.toString()) };\n          h('span', { text: 'function', attr });\n          Content.keyword({\n            text: $value.map((ƒ) => (ƒ.name ? ` ${ƒ.name}` : '')),\n            attr,\n          });\n          h('span', { text: '()', attr });\n        },\n\n        AsyncFunction({ store: $variantSource }) {\n          const $value = remap($variantSource, 'value');\n          const attr = { title: $value.map((ƒ) => ƒ.toString()) };\n          h('span', { text: 'async function', attr });\n          Content.keyword({\n            text: $value.map((ƒ) => (ƒ.name ? ` ${ƒ.name}` : '')),\n            attr,\n          });\n          h('span', { text: '()', attr });\n        },\n\n        Window({ store: $variantSource }) {\n          const $opened = remap($variantSource, 'opened');\n          h('span', () => {\n            spec({ data: { opened: $opened } });\n\n            h('span', {\n              text: 'Window {...',\n              fn() {\n                handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n              },\n            });\n            spec({ text: '}' });\n          });\n        },\n\n        Date() {\n          Content.date({\n            text: $value.map((date) => date.toISOString?.()),\n            attr: { title: $value },\n          });\n        },\n\n        Array({ store: $variantSource }) {\n          const [$value, $opened] = remap($variantSource, ['value', 'opened']);\n          h('span', () => {\n            spec({ data: { opened: $opened } });\n\n            h('span', {\n              text: 'Array [',\n              data: { clickable: true },\n              fn() {\n                handler(\n                  { passive: true, stop: true, capture: true, prevent: true },\n                  { click: foldableClicked },\n                );\n              },\n            });\n\n            list($value, ({ store, key }) =>\n              ListItem(() =>\n                Value({\n                  store: combine({\n                    value: store,\n                    parentOpened: $opened,\n                    key: key.map(String),\n                  }),\n                }),\n              ),\n            );\n            spec({ text: ']' });\n          });\n        },\n\n        Arguments({ store: $variantSource }) {\n          const [$value, $opened] = remap($variantSource, ['value', 'opened']);\n          h('span', () => {\n            spec({ data: { opened: $opened } });\n\n            h('span', {\n              text: 'Arguments [',\n              fn() {\n                handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n              },\n            });\n\n            list(\n              $value.map((args) => [...args] as unknown[]),\n              ({ store, key }) =>\n                ListItem(() =>\n                  Value({\n                    store: combine({\n                      value: store,\n                      parentOpened: $opened,\n                      key: key.map(String),\n                    }),\n                  }),\n                ),\n            );\n            spec({ text: ']' });\n          });\n        },\n        Set({ store: $variantSource }) {\n          const [$value, $opened] = remap($variantSource, ['value', 'opened']);\n          h('span', () => {\n            spec({ data: { opened: $opened } });\n\n            h('span', {\n              text: 'Set [',\n              fn() {\n                handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n              },\n            });\n\n            list(\n              $value.map((set) => [...set.values()] as unknown[]),\n              ({ store, key }) =>\n                ListItem(() =>\n                  Value({\n                    store: combine({\n                      value: store,\n                      parentOpened: $opened,\n                      key: key.map(String),\n                    }),\n                  }),\n                ),\n            );\n            spec({ text: ']' });\n          });\n        },\n\n        Map({ store: $variantSource }) {\n          const [$value, $opened] = remap($variantSource, ['value', 'opened']);\n          h('span', () => {\n            spec({ data: { opened: $opened } });\n\n            h('span', () => {\n              spec({ text: 'Map {' });\n              handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n            });\n\n            list(\n              $value.map((map) => [...map.entries()] as [string, unknown][]),\n              ({ store: $entryItem }) => {\n                const [$key, $value] = remap($entryItem, ['0', '1']);\n\n                ListItem(() => {\n                  Content.string({\n                    text: [`\"`, $key, `\"`],\n                    fn() {\n                      handler(\n                        { passive: true, stop: true, capture: true },\n                        { click: foldableClicked },\n                      );\n                    },\n                  });\n\n                  h('span', { text: ' => ' });\n                  Value({\n                    store: combine({\n                      value: $value,\n                      parentOpened: $opened,\n                      key: $key,\n                    }),\n                  });\n                });\n              },\n            );\n            spec({ text: '}' });\n          });\n        },\n\n        Error({ store: $variantSource }) {\n          const [$value, $opened] = remap($variantSource, ['value', 'opened']);\n\n          const [$name, $message] = remap($value as Store<Error>, ['name', 'message']);\n          const $stack = $value.map((error) => error.stack ?? null);\n\n          h('span', () => {\n            spec({ data: { opened: $opened } });\n\n            h('span', {\n              text: [$name, ' {'],\n              attr: { title: $value.map((error) => error.constructor.name) },\n              fn() {\n                handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n              },\n            });\n\n            ListItem(() => {\n              spec({ data: { hidden: 'expanded' } });\n\n              Content.string({\n                text: [`\"message\"`],\n                fn() {\n                  handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n                },\n              });\n              h('span', { text: ': ' });\n              Value({\n                store: combine({\n                  value: $message,\n                  parentOpened: $opened,\n                  key: 'message',\n                }),\n              });\n            });\n\n            ListItem(() => {\n              spec({ data: { hidden: 'folded' } });\n\n              Content.string({\n                text: [`\"stack\"`],\n                fn() {\n                  handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n                },\n              });\n              h('span', { text: ': ' });\n\n              const store = combine({\n                value: $stack,\n                parentOpened: $opened,\n                key: 'stack',\n              });\n              Value({ store });\n            });\n\n            list(\n              $value.map((object) => [...Object.entries(object)]),\n              ({ store: $errorEntry }) => {\n                const [$key, $value] = remap($errorEntry, ['0', '1']);\n\n                ListItem(() => {\n                  Content.string({\n                    text: [`\"`, $key, `\"`],\n                    fn() {\n                      handler(\n                        { passive: true, stop: true, capture: true },\n                        { click: foldableClicked },\n                      );\n                    },\n                  });\n\n                  h('span', { text: ': ' });\n                  Value({\n                    store: combine({\n                      value: $value,\n                      parentOpened: $opened,\n                      key: $key,\n                    }),\n                  });\n                });\n              },\n            );\n          });\n\n          h('span', { text: '}' });\n        },\n        //#endregion\n        __({ store: $variantSource }) {\n          h('span', () => {\n            const [$type, $value, $opened] = remap($variantSource, ['type', 'value', 'opened']);\n            spec({ data: { opened: $opened } });\n\n            h('span', {\n              text: [$type, ' {'],\n              fn() {\n                handler({ passive: true, stop: true, capture: true }, { click: foldableClicked });\n              },\n            });\n\n            list(\n              $value.map((object) => [...Object.entries(object as object)]),\n              ({ store: $entry }) => {\n                const [$entryKey, $entryValue] = remap($entry, ['0', '1']);\n\n                ListItem(() => {\n                  Content.string({\n                    text: [`\"`, $entryKey, `\"`],\n                    fn() {\n                      handler(\n                        { passive: true, stop: true, capture: true },\n                        { click: foldableClicked },\n                      );\n                    },\n                  });\n\n                  h('span', { text: ': ' });\n                  Value({\n                    store: combine({\n                      value: $entryValue,\n                      parentOpened: $opened,\n                      key: $entryKey,\n                    }),\n                  });\n                });\n              },\n            );\n          });\n          h('span', { text: '}' });\n        },\n      },\n    });\n  });\n\n  const value = _.value;\n\n  const store = combine(\n    {\n      value,\n      parentOpened: createStore(true),\n      key: '',\n    },\n    (a) => a, // solving ts errors\n  );\n\n  Value({ store });\n}\n","import { Store } from 'effector';\nimport { Options } from './types.h';\n\nexport function trimDomain(source: Store<string>, options: Options): Store<string> {\n  if (options.trimDomain) {\n    return source.map((value) => value.replace(`${options.trimDomain!}/`, ''));\n  }\n  return source;\n}\n","import { Store, createStore, createEvent, combine, restore, Event } from 'effector';\nimport { list, h } from 'forest';\n\nimport { LogMeta, Kind, Options } from './types.h';\nimport {\n  NodeList,\n  Node,\n  NodeTitle,\n  NodeContent,\n  Panel,\n  Checkbox,\n  Input,\n  NodeButton,\n} from './components';\nimport { ObjectView } from './object-view';\nimport { createJsonSetting, createSetting } from './setting';\nimport { trimDomain } from './trim-domain';\n\nconst defaultKinds: Kind[] = ['event', 'store'];\nconst kindSetting = createJsonSetting<Kind[]>('filter-kinds', defaultKinds);\nconst textSetting = createSetting('filter-text', '');\n\nexport function Logs($logs: Store<LogMeta[]>, hotKeyClear: Event<void>, options: Options) {\n  const toggleKind = createEvent<Kind>();\n  const filterChanged = createEvent<string>();\n  const clearClicked = createEvent<MouseEvent>();\n\n  const $kinds = createStore(kindSetting.read());\n  const $filterText = restore(filterChanged, textSetting.read());\n\n  $kinds\n    .on(toggleKind, (exist, toggled) =>\n      exist.includes(toggled) ? exist.filter((i) => i !== toggled) : [...exist, toggled],\n    )\n    .watch(kindSetting.write);\n  $filterText.watch(textSetting.write);\n  $logs.on(clearClicked, () => []).on(hotKeyClear, () => []);\n\n  Panel(() => {\n    h('span', { text: 'Show: ' });\n    Checkbox({\n      title: 'Event',\n      attr: { checked: $kinds.map((list) => list.includes('event')) },\n      handler: { click: toggleKind.prepend(() => 'event') },\n    });\n    Checkbox({\n      title: 'Store',\n      attr: { checked: $kinds.map((list) => list.includes('store')) },\n      handler: { click: toggleKind.prepend(() => 'store') },\n    });\n    Checkbox({\n      title: 'Effect',\n      attr: { checked: $kinds.map((list) => list.includes('effect')) },\n      handler: { click: toggleKind.prepend(() => 'effect') },\n    });\n\n    h('span', { text: 'Filter:' });\n    Input({\n      attr: { value: $filterText },\n      handler: {\n        change: filterChanged.prepend((event) => (event.currentTarget as any)?.value ?? ''),\n      },\n    });\n\n    NodeButton({\n      text: 'Clear',\n      handler: { click: clearClicked },\n      attr: { title: 'Press CTRL+L to clear logs' },\n    });\n  });\n\n  NodeList(() => {\n    list({\n      source: $logs,\n      key: 'id',\n      fields: ['kind', 'name', 'payload', 'datetime'],\n      fn({ fields: [$kind, $rawName, $payload, $datetime] }) {\n        const $name = trimDomain($rawName, options);\n        const $kindMatched = combine($kind, $kinds, (current, visible) =>\n          visible.includes(current),\n        );\n        const $textMatched = combine($filterText, $name, (filter, name) => name.includes(filter));\n        const $visible = combine($kindMatched, $textMatched, (kind, text) => kind && text);\n\n        Node({\n          visible: $visible,\n          fn() {\n            const $iso = $datetime.map((date) => date.toISOString());\n            const $time = $datetime.map((date) => date.toLocaleTimeString());\n\n            NodeTitle({ text: [$time, ' ▸ '], attr: { title: $iso } });\n            NodeTitle({ text: $kind as Store<string> });\n            NodeTitle({ text: [' «', $name, '» '] });\n            NodeContent(() => ObjectView({ value: $payload }));\n          },\n        });\n      },\n    });\n  });\n}\n","import {combine, createEvent, restore, Store} from 'effector';\nimport { list } from 'forest';\nimport { styled } from \"foliage\";\n\nimport { Options, StoreMeta } from './types.h';\nimport { Node, NodeContent, NodeList, NodeTitle, Search } from './components';\nimport { ObjectView } from './object-view';\nimport { trimDomain } from './trim-domain';\n\n\nexport function Stores($stores: Store<Record<string, StoreMeta>>, options: Options) {\n\n  const $list = $stores.map((map) =>\n    Object.entries(map).map(([name, meta]) => ({ name, ...meta })),\n  );\n\n  const filterChanged = createEvent<string>();\n  const $filter = restore(filterChanged, '');\n\n  const $filteredList = combine($list, $filter, (list, searchWord) =>\n    list.filter(item => item.name.includes(searchWord)),\n  );\n\n  const searchChanged = filterChanged.prepend(\n    (e: Event | KeyboardEvent) => (e.currentTarget as HTMLInputElement)?.value,\n  );\n\n  Header(() => {\n    Search({\n      attr: {\n        value: $filter,\n        placeholder: 'Type a part of store name',\n      },\n      handler: { input: searchChanged },\n    });\n  })\n\n  NodeList(() => {\n    list({\n      source: $filteredList,\n      key: 'name',\n      fields: ['name', 'value'],\n      fn({ fields: [$name, $value] }) {\n        Node(() => {\n          NodeTitle({ text: [trimDomain($name, options), ': '] });\n          NodeContent(() => {\n            ObjectView({ value: $value });\n          });\n        });\n      },\n    });\n  });\n}\n\nconst Header = styled.div`\n  padding: 6px;\n\n  ${Search} {\n    width: 100%;\n    box-sizing: border-box;\n    margin: 0;\n  }\n`\n","import { Store } from 'effector';\nimport { list } from 'forest';\nimport { styled } from 'foliage';\n\nimport { EventMeta, Options } from './types.h';\nimport { Node, NodeContent, NodeList, NodeTitle } from './components';\nimport { ObjectView } from './object-view';\nimport { trimDomain } from './trim-domain';\n\nexport function Events($events: Store<Record<string, EventMeta>>, options: Options) {\n  NodeList(() => {\n    const $list = $events.map((map) =>\n      Object.entries(map).map(([name, meta]) => ({ name, ...meta })),\n    );\n\n    list({\n      source: $list,\n      key: 'name',\n      fields: ['name', 'history'],\n      fn({ fields: [$name, $history] }) {\n        Node(() => {\n          NodeTitle({ text: [trimDomain($name, options), ' '] });\n\n          // HistoryLine(() => {\n          //   list($history, ({ store }) => {\n          //     NodeContent(() => {\n          //       ObjectView({ value: store });\n          //     });\n          //   });\n          // });\n          // NodeButton({\n          //   text: 'Logs',\n          //   handler: { click: changeTab.prepend(() => 'logs') },\n          // });\n        });\n      },\n    });\n  });\n}\n\nconst HistoryLine = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n\n  :nth-child(2),\n  :nth-child(3),\n  :nth-child(4),\n  :nth-child(5) {\n    opacity: 0.8;\n  }\n\n  > :nth-child(n + 6) {\n    opacity: 0.5;\n  }\n\n  > :not(:first-child) {\n    margin-left: 0.5rem;\n  }\n`;\n","import { Store } from 'effector';\nimport { list, h, text } from 'forest';\n\nimport { EffectMeta, Options } from './types.h';\nimport { NodeList, Node, NodeTitle, NodeContent, Content, ListItem } from './components';\nimport { trimDomain } from './trim-domain';\n\nexport function Effects($effects: Store<Record<string, EffectMeta>>, options: Options) {\n  NodeList(() => {\n    const $list = $effects.map((map) =>\n      Object.entries(map).map(([sid, meta]) => ({ sid, ...meta })),\n    );\n\n    list({\n      source: $list,\n      key: 'sid',\n      fields: ['name', 'inFlight'],\n      fn({ fields: [$name, $inFlight] }) {\n        Node(() => {\n          NodeTitle({ text: [trimDomain($name, options), ' '] });\n          NodeContent(() => {\n            h('span', () => {\n              h('span', { text: [' {'] });\n              ListItem(() => {\n                Content.string({ text: `\"inFlight\": ` });\n                Content.number({ text: $inFlight });\n              });\n              text`}`;\n            });\n          });\n        });\n      },\n    });\n  });\n}\n","import { combine, createEvent, createStore, restore, sample, Store } from 'effector';\nimport { h, list } from 'forest';\nimport { styled } from 'foliage';\n\nimport { EffectMeta, EventMeta, FilesMap, Options, StoreMeta } from './types.h';\nimport { Column, NodeButton, Panel, Row, Select, Search } from './components';\nimport { Stores } from './stores';\nimport { Events } from './events';\nimport { Effects } from './effects';\n\nexport function Files(source: {\n  $stores: Store<Record<string, StoreMeta>>;\n  $events: Store<Record<string, EventMeta>>;\n  $effects: Store<Record<string, EffectMeta>>;\n  $files: Store<FilesMap>;\n  options: Options;\n}) {\n  const $filesList = source.$files.map((files) =>\n    Object.keys(files).sort((a, b) => {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    }),\n  );\n  const $hasFiles = $filesList.map((files) => files.length > 0);\n\n  const fileSelected = createEvent<string>();\n  const fileCleanup = createEvent();\n\n  const $currentFile = createStore('');\n  const $hasSelectedFile = $currentFile.map((file) => file !== '');\n  const $noFileSelected = $hasSelectedFile.map((has) => !has);\n\n  $currentFile.on(fileSelected, (_, file) => file).on(fileCleanup, () => '');\n\n  Panel({\n    style: { flexDirection: 'column' },\n    visible: $hasFiles,\n    fn() {\n      Row({\n        visible: $hasSelectedFile,\n        fn() {\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          NodeButton({\n            text: '◀',\n            handler: {\n              // eslint-disable-next-line @typescript-eslint/no-empty-function\n              click: fileCleanup.prepend(() => {}),\n            },\n          });\n          h('span', { text: 'File:' });\n          Select({\n            handler: {\n              change: fileSelected.prepend((e) => (e.currentTarget as HTMLSelectElement).value),\n            },\n            fn() {\n              list($filesList, ({ store }) => {\n                h('option', {\n                  attr: {\n                    value: store,\n                    selected: combine(store, $currentFile, (item, selected) => item === selected),\n                  },\n                  text: store,\n                });\n              });\n            },\n          });\n        },\n      });\n\n      Column({\n        visible: $noFileSelected,\n        fn() {\n          const filterChanged = createEvent<string>();\n          const $filter = restore(filterChanged, '');\n          const $filteredFiles = combine($filter, $filesList, (searchWord, list) =>\n            list.filter((file) => file.includes(searchWord)),\n          );\n\n          Title({ text: 'Please, select file from the list or type the name' });\n          const searchChanged = filterChanged.prepend(\n            (e: Event | KeyboardEvent) => (e.currentTarget as HTMLInputElement)?.value,\n          );\n          Column(() => {\n            Search({\n              attr: {\n                value: $filter,\n                placeholder: 'Type a part of the file name',\n              },\n              handler: { input: searchChanged },\n            });\n            FileList(() => {\n              list($filteredFiles, ({ store, key }) => {\n                const selectFile = createEvent<MouseEvent>();\n                sample({\n                  source: store,\n                  clock: selectFile,\n                  target: fileSelected,\n                });\n                FileItem({\n                  text: store,\n                  attr: { tabIndex: '0' },\n                  handler: { click: selectFile },\n                });\n              });\n            });\n          });\n        },\n      });\n    },\n  });\n\n  Panel({\n    visible: $hasSelectedFile,\n    fn() {\n      const $events = combine(\n        $currentFile,\n        source.$files,\n        source.$events,\n        (current, files, events) => {\n          if (current === '' || !files[current]) {\n            return {};\n          }\n\n          return Object.fromEntries(\n            files[current]\n              .filter(({ kind }) => kind === 'event')\n              .map(({ name }) => [name, events[name]]),\n          );\n        },\n      );\n      const $stores = combine(\n        $currentFile,\n        source.$files,\n        source.$stores,\n        (current, files, stores) => {\n          if (current === '' || !files[current]) {\n            return {};\n          }\n\n          return Object.fromEntries(\n            files[current]\n              .filter(({ kind }) => kind === 'store')\n              .map(({ name }) => [name, stores[name]]),\n          );\n        },\n      );\n      const $effects = combine(\n        $currentFile,\n        source.$files,\n        source.$effects,\n        (current, files, effects) => {\n          if (current === '' || !files[current]) {\n            return {};\n          }\n\n          return Object.fromEntries(\n            files[current]\n              .filter(({ kind }) => kind === 'effect')\n              .map(({ name }) => [name, effects[name]]),\n          );\n        },\n      );\n      Column(() => {\n        Events($events, source.options);\n        Stores($stores, source.options);\n        Effects($effects, source.options);\n      });\n    },\n  });\n}\n\nconst Title = styled.h4`\n  margin-top: 0;\n`;\n\nconst FileList = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin: 0 0;\n  padding: 0 0;\n  overflow-x: auto;\n  align-items: stretch;\n\n  list-style-type: none;\n\n  :nth-child(2n) {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst FileItem = styled.button`\n  color: var(--text);\n  font-family: 'JetBrains Mono', hasklig, monofur, monospace;\n  font-size: 14px;\n  text-align: left;\n\n  border: var(--primary);\n  padding: 0.2rem 0.4rem;\n\n  cursor: pointer;\n\n  &:hover {\n    background-color: var(--primary-dark);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: inset 0 0 0 2px var(--primary-dark);\n  }\n`;\n","import { createEvent, Event, Store } from 'effector';\nimport { h, list, remap, text, variant } from 'forest';\n\nimport { styled } from 'foliage';\nimport { Options, StackTrace } from './types.h';\nimport { Node, NodeButton, NodeContent, NodeList, Panel } from './components';\nimport { ObjectView } from './object-view';\n\nexport function Traces($traces: Store<StackTrace[]>, hotKeyClear: Event<void>, options: Options) {\n  const clearClicked = createEvent<MouseEvent>();\n\n  $traces.on([clearClicked, hotKeyClear], () => []);\n\n  Panel(() => {\n    NodeButton({\n      text: 'Clear',\n      handler: { click: clearClicked },\n      attr: { title: 'Press CTRL+L to clear logs' },\n    });\n  });\n\n  NodeList(() => {\n    list({\n      source: $traces,\n      key: 'time',\n      fn({ store: trace }) {\n        TraceTitle(() => {\n          ObjectView({ value: remap(trace, 'time').map((time) => new Date(time)) });\n        });\n        TraceList(() => {\n          list(remap(trace, 'traces'), ({ store: line }) => {\n            variant({\n              source: line,\n              key: 'type',\n              cases: {\n                event({ store }) {\n                  Node({\n                    fn() {\n                      TraceLine(() => {\n                        text`Event \"`;\n                        h('span', {\n                          attr: { class: 'event' },\n                          text: remap(store, 'name'),\n                        });\n                        text`\" triggered with `;\n                      });\n                      NodeContent(() => ObjectView({ value: remap(store, 'argument') }));\n                    },\n                  });\n                },\n                store({ store }) {\n                  Node({\n                    fn() {\n                      TraceLine(() => {\n                        text`Store \"`;\n                        h('span', {\n                          attr: { class: 'store' },\n                          text: remap(store, 'name'),\n                        });\n                        text`\" changed from `;\n                      });\n                      NodeContent(() => ObjectView({ value: remap(store, 'before') }));\n                      TraceLine(() => text` to `);\n                      NodeContent(() => ObjectView({ value: remap(store, 'current') }));\n                    },\n                  });\n                },\n                effect({ store }) {\n                  Node({\n                    fn() {\n                      TraceLine(() => {\n                        text`Effect \"`;\n                        h('span', {\n                          attr: { class: 'effect' },\n                          text: remap(store, 'name'),\n                        });\n                        text`\" triggered with `;\n                      });\n                      NodeContent(() => ObjectView({ value: remap(store, 'argument') }));\n                    },\n                  });\n                },\n              },\n            });\n          });\n        });\n      },\n    });\n  });\n}\n\nconst TraceList = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0.25rem 0.5rem;\n`;\n\nconst TraceTitle = styled.div`\n  font-size: 0.8rem;\n  margin-top: 1rem;\n  margin-left: 0.5rem;\n`;\n\nconst TraceLine = styled.div`\n  display: flex;\n  font-family: 'JetBrains Mono', hasklig, monofur, monospace;\n  margin: 0 0.5rem;\n  flex-shrink: 0;\n\n  .event {\n    color: var(--code-var);\n  }\n\n  .store {\n    color: var(--code-string);\n  }\n\n  .effect {\n    color: var(--code-number);\n  }\n`;\n","import { createEvent, createStore, restore, sample, Store } from 'effector';\n\nimport {\n  EffectMeta,\n  EventMeta,\n  FilesMap,\n  LogMeta,\n  Options,\n  StackTrace,\n  StoreMeta,\n} from './types.h';\nimport { Container, DragHandler } from './components';\nimport { Tabs } from './tabs';\nimport { Logs } from './logs';\nimport { Stores } from './stores';\nimport { Events } from './events';\nimport { Effects } from './effects';\nimport { DOMElement, node, spec, val } from 'forest';\nimport { createJsonSetting } from './setting';\nimport { Files } from './files';\nimport { Traces } from './traces';\n\nconst KEY_B = 2;\nconst KEY_L = 12;\n\nconst $isVisible = createStore(false);\nconst togglePressed = createEvent();\nconst clearPressed = createEvent();\nconst showInspector = createEvent();\n\nif (typeof document === 'object') {\n  document.addEventListener('keypress', (event) => {\n    if (event.ctrlKey) {\n      if (event.key === 'l' || event.keyCode === KEY_L) {\n        clearPressed();\n      }\n      if (event.key === 'b' || event.keyCode === KEY_B) {\n        togglePressed();\n      }\n    }\n  });\n}\n\nfunction dragdrop() {\n  const $inDrag = createStore(false);\n  const mouseDown = createEvent<MouseEvent>();\n  const mouseMove = createEvent<MouseEvent>();\n  const mouseUp = createEvent<MouseEvent>();\n\n  $inDrag.on(mouseDown, () => true).on(mouseUp, () => false);\n\n  spec({ handler: { mousedown: mouseDown } });\n\n  mouseDown.watch(() => {\n    if (document) {\n      document.addEventListener('mousemove', mouseMove);\n      document.addEventListener('mouseup', mouseUp);\n    }\n  });\n\n  mouseUp.watch(() => {\n    document.removeEventListener('mousemove', mouseMove);\n    document.removeEventListener('mouseup', mouseUp);\n  });\n\n  return { mouseMove, mouseDown, mouseUp, $inDrag };\n}\n\nfunction ref() {\n  const setRef = createEvent<DOMElement>();\n  const $ref = restore(setRef, null);\n  node(setRef);\n\n  return $ref as Store<DOMElement>;\n}\n\n$isVisible.on(togglePressed, (visible) => !visible).on(showInspector, () => true);\n\nexport function Root(\n  $stores: Store<Record<string, StoreMeta>>,\n  $events: Store<Record<string, EventMeta>>,\n  $effects: Store<Record<string, EffectMeta>>,\n  $logs: Store<LogMeta[]>,\n  $files: Store<FilesMap>,\n  $traces: Store<StackTrace[]>,\n  options: Options = {},\n) {\n  if (options.visible) {\n    showInspector();\n  }\n\n  console.info(\n    '%c[effector-inspector] %cPress %cCTRL+B %cto open Inspector',\n    'color: gray; font-size: 1rem;',\n    'color: currentColor; font-size: 1rem;',\n    'color: deepskyblue; font-family: monospace; font-size: 1rem;',\n    'color: currentColor; font-size: 1rem;',\n  );\n\n  Container({\n    visible: $isVisible,\n    fn() {\n      const $blockRef = ref();\n\n      const widthSetting = createJsonSetting('width', 736);\n      const $width = createStore(widthSetting.read());\n      spec({ style: { width: val`${$width}px` } });\n\n      DragHandler({\n        text: '∙∙∙',\n        fn() {\n          const { mouseMove, mouseDown, mouseUp, $inDrag } = dragdrop();\n\n          spec({ data: { active: $inDrag } });\n\n          const $shift = createStore(0);\n\n          const dragStart = sample($blockRef, mouseDown, (block, event) => ({\n            block,\n            event,\n          }));\n          const dragMove = sample($blockRef, mouseMove, (block, event) => {\n            const rect = block.getBoundingClientRect();\n            return rect.right - event.clientX;\n          });\n\n          const correctWidth = sample($shift, dragMove, (shift, width) => width - shift);\n\n          $width.on(correctWidth, (_, width) => width);\n\n          $shift.on(dragStart, (_, { block, event }) =>\n            block ? block.getBoundingClientRect().left - event.clientX : 0,\n          );\n\n          sample($width, mouseUp, widthSetting.save);\n        },\n      });\n\n      Tabs({\n        files: {\n          title: 'Files',\n          fn() {\n            Files({\n              $stores,\n              $events,\n              $effects,\n              $files,\n              options,\n            });\n          },\n        },\n        stores: {\n          title: 'Stores',\n          fn() {\n            Stores($stores, options);\n          },\n        },\n        effects: {\n          title: 'Effects',\n          fn() {\n            Effects($effects, options);\n          },\n        },\n        events: {\n          title: 'Events',\n          fn() {\n            Events($events, options);\n          },\n        },\n        traces: {\n          title: 'Traces',\n          fn() {\n            Traces($traces, clearPressed, options);\n          },\n        },\n        logs: {\n          title: 'Logs',\n          fn() {\n            Logs($logs, clearPressed, options);\n          },\n        },\n      });\n    },\n  });\n}\n","import {\n  CompositeName,\n  createEffect,\n  createEvent,\n  createStore,\n  Effect,\n  Event,\n  forward,\n  guard,\n  merge,\n  sample,\n  Store,\n  Unit,\n  step,\n  Node,\n} from 'effector';\nimport { using } from 'forest';\nimport { StyledRoot } from 'foliage';\n\nimport {\n  EffectCreator,\n  EffectMeta,\n  EventCreator,\n  EventMeta,\n  FilesMap,\n  Inspector,\n  Kind,\n  LogMeta,\n  Options,\n  StoreCreator,\n  Trace,\n  StoreMeta,\n  StackTrace,\n  TraceStoreChange,\n  TraceEventTrigger,\n  TraceEffectRun,\n} from './types.h';\nimport { Root } from './view';\n\nconst $files = createStore<FilesMap>({}, {serialize: 'ignore'});\n\nconst storeAdd = createEvent<StoreCreator>();\nconst storeUpdated = createEvent<{ name: string; value: any }>();\nconst $stores = createStore<Record<string, StoreMeta>>({}, {serialize: 'ignore'});\n\nconst eventAdd = createEvent<EventCreator>();\nconst eventTriggered = createEvent<{ name: string; params: any }>();\nconst $events = createStore<Record<string, EventMeta>>({}, {serialize: 'ignore'});\n\nconst effectAdd = createEvent<EffectCreator>();\nconst effectTriggered = createEvent<{ sid: string }>();\nconst $effects = createStore<Record<string, EffectMeta>>({}, {serialize: 'ignore'});\n\nconst $logs = createStore<LogMeta[]>([], {serialize: 'ignore'});\n\nconst traceStoreChange = createEvent<TraceStoreChange>();\nconst traceEventTrigger = createEvent<TraceEventTrigger>();\nconst traceEffectRun = createEvent<TraceEffectRun>();\nconst traceAdd = merge([traceStoreChange, traceEventTrigger, traceEffectRun]);\n\nconst traceFinished = createEvent();\n\nconst $traces = createStore<StackTrace[]>([]);\nconst $currentTrace = createStore<StackTrace>({ time: 0, traces: [] });\n\n$currentTrace.on(traceAdd, ({ time, traces }, trace) => ({\n  time: time ? time : Date.now(),\n  traces: [...traces, trace],\n}));\n\nguard({\n  source: $currentTrace,\n  clock: traceAdd,\n  filter: ({ traces }) => traces.length === 1,\n}).watch(() => queueMicrotask(traceFinished));\n\nconst moveTrace = sample({\n  source: $currentTrace,\n  clock: traceFinished,\n});\n\n$traces.on(moveTrace, (stackTraces, newTrace) => [...stackTraces, newTrace]);\n$currentTrace.reset(moveTrace);\n\n// $traces.watch((t) => console.log('traces', t));\n\n$stores\n  .on(storeAdd, (map, payload) => ({\n    ...map,\n    [payload.name]: {\n      value: payload.store.getState(),\n      mapped: payload.mapped,\n    },\n  }))\n  .on(storeUpdated, (map, { name, value }) => {\n    // should not change the order of fields\n    map[name] = { ...map[name], value };\n    return { ...map };\n  });\n\n$files.on(storeAdd, (map, { name, file }) => {\n  if (file) {\n    if (map[file]) {\n      const list = map[file];\n      return { ...map, [file]: [...list, { kind: 'store', name }] };\n    }\n\n    return { ...map, [file]: [{ kind: 'store', name }] };\n  }\n\n  return map;\n});\n\n$events\n  .on(eventAdd, (map, payload) => ({\n    ...map,\n    [payload.name]: {\n      mapped: payload.mapped,\n      history: [],\n    },\n  }))\n  .on(eventTriggered, (map, { name, params }) => {\n    // should not change the order of fields\n    const safeParams = params === undefined ? undefined : JSON.parse(JSON.stringify(params));\n    map[name] = {\n      ...map[name],\n      history: [safeParams, ...map[name].history],\n    };\n    return { ...map };\n  });\n\n$files.on(eventAdd, (map, { name, file }) => {\n  if (file) {\n    if (map[file]) {\n      const list = map[file];\n      return { ...map, [file]: [...list, { kind: 'event', name }] };\n    }\n\n    return { ...map, [file]: [{ kind: 'event', name }] };\n  }\n\n  return map;\n});\n\n$effects\n  .on(effectAdd, (map, effect) => ({\n    ...map,\n    [effect.sid]: {\n      name: effect.name,\n      effect: effect.effect,\n      inFlight: effect.effect.inFlight.getState(),\n    },\n  }))\n  .on(effectTriggered, (map, { sid }) => {\n    const fx = map[sid];\n    map[sid] = {\n      ...fx,\n      inFlight: fx.effect.inFlight.getState(),\n    };\n    return { ...map };\n  });\n\n$files.on(effectAdd, (map, { name, file }) => {\n  if (file) {\n    if (map[file]) {\n      const list = map[file];\n      return { ...map, [file]: [...list, { kind: 'event', name }] };\n    }\n\n    return { ...map, [file]: [{ kind: 'event', name }] };\n  }\n\n  return map;\n});\n\nlet id = 1e3;\nconst nextId = () => (++id).toString(36);\n\ntype CreateRecord = Pick<LogMeta, 'name' | 'kind' | 'payload'>;\n\nconst createRecordFx = createEffect<CreateRecord, LogMeta>({\n  handler({ name, kind, payload }) {\n    return {\n      id: nextId(),\n      kind,\n      name,\n      payload,\n      datetime: new Date(),\n    };\n  },\n});\n\nforward({\n  from: eventTriggered,\n  to: createRecordFx.prepend(({ name, params }) => ({\n    kind: 'event',\n    name,\n    payload: params,\n  })),\n});\n\nforward({\n  from: storeUpdated,\n  to: createRecordFx.prepend(({ name, value }) => ({\n    kind: 'store',\n    name,\n    payload: value,\n  })),\n});\n\n$logs.on(createRecordFx.doneData, (logs, record) => [record, ...logs]);\n\nfunction graphite(unit: Unit<any>): Node {\n  return (unit as any).graphite;\n}\n\nfunction traceEffect(effect: Effect<any, any, any>) {\n  const name = createName(effect);\n  graphite(effect).seq.unshift(\n    step.compute({\n      fn(data, scope, stack) {\n        traceEffectRun({ type: 'effect', name, argument: data?.param });\n        return data;\n      },\n    }),\n  );\n  traceEvent(effect.doneData, `${name}.doneData`);\n  traceEvent(effect.failData, `${name}.failData`);\n}\n\nfunction traceEvent(event: Event<any>, name = createName(event)) {\n  graphite(event).seq.unshift(\n    step.compute({\n      fn(data, scope, stack) {\n        traceEventTrigger({ type: 'event', name, argument: data });\n        return data;\n      },\n    }),\n  );\n}\n\nfunction copy<T>(a: T): T {\n  return JSON.parse(JSON.stringify(a));\n}\n\nfunction traceStore($store: Store<any>) {\n  const name = createName($store);\n  traceEvent($store.updates, `${name}.updates`);\n  graphite($store).seq.unshift(\n    step.compute({\n      fn(data, scope) {\n        scope.trace = { before: copy(scope.state.current) };\n        return data;\n      },\n    }),\n  );\n  graphite($store).seq.push(\n    step.compute({\n      fn(data, scope, stack) {\n        traceStoreChange({\n          type: 'store',\n          name,\n          before: scope.trace.before,\n          current: data,\n        });\n        return data;\n      },\n    }),\n  );\n}\n\nexport function createInspector(options: Options = {}): Inspector | undefined {\n  const root = typeof document === 'object' && document.createElement('div');\n  if (!root) return undefined;\n  root.classList.add('effector-inspector');\n\n  document.body.append(root);\n\n  using(root, () => Root($stores, $events, $effects, $logs, $files, $traces, options));\n  using(root, StyledRoot);\n\n  return { root };\n}\n\nfunction getLocFile(unit: Unit<any>): string | undefined {\n  return (unit as any).defaultConfig?.loc?.file;\n}\n\nexport function addStore(\n  store: Store<any>,\n  options: { mapped?: boolean; name?: string } = {},\n): void {\n  const name = options.name || createName(store);\n\n  storeAdd({\n    store,\n    name,\n    mapped: options.mapped || false,\n    file: getLocFile(store),\n  });\n\n  traceStore(store);\n\n  forward({\n    from: store.updates.map((value) => ({ name, value })),\n    to: storeUpdated,\n  });\n}\n\nexport function addEvent(\n  event: Event<any>,\n  options: { mapped?: boolean; name?: string } = {},\n): void {\n  const name = options.name || createName(event);\n\n  eventAdd({\n    event,\n    name,\n    mapped: options.mapped || false,\n    file: getLocFile(event),\n  });\n\n  traceEvent(event);\n\n  forward({\n    from: event.map((params) => ({\n      name,\n      params,\n    })),\n    to: eventTriggered,\n  });\n}\n\nexport function addEffect(\n  effect: Effect<any, any, any>,\n  options: { attached?: boolean; sid?: string } = {},\n) {\n  const name = createName(effect);\n  const sid = options.sid || effect.sid || name;\n\n  effectAdd({\n    effect,\n    name,\n    sid,\n    attached: options.attached ?? false,\n    file: getLocFile(effect),\n  });\n\n  traceEffect(effect);\n\n  forward({\n    from: [effect, effect.finally],\n    to: effectTriggered.prepend(() => ({ sid })),\n  });\n\n  const effectRun = effect.map((params) => ({\n    kind: 'effect' as Kind,\n    name,\n    payload: params,\n  }));\n\n  const effectDone = effect.done.map((params) => ({\n    kind: 'effect' as Kind,\n    name: name + '.done',\n    payload: params,\n  }));\n\n  const effectFail = effect.fail.map((params) => ({\n    kind: 'effect' as Kind,\n    name: name + '.fail',\n    payload: params,\n  }));\n\n  forward({\n    from: [effectRun, effectDone, effectFail],\n    to: createRecordFx,\n  });\n}\n\nfunction createName<T extends { compositeName: CompositeName }>(unit: T): string {\n  return unit.compositeName.path.join('/');\n}\n"],"names":["Container","styled","div","DragHandler","Section","section","SectionHead","SectionTab","SectionContent","NodeList","ul","Node","li","NodeTitle","pre","NodeContent","NodeButton","button","ListItem","span","boolean","number","string","nullable","date","symbol","regexp","Row","Content","keyword","Panel","Check","input","Label","label","Input","Column","Checkbox","arg","title","config","spec","attr","type","text","Select","select","Search","PREFIX","Math","toString","read","name","defaultValue","localStorage","getItem","write","value","setItem","createSetting","save","createEvent","watch","createJsonSetting","JSON","stringify","parse","Tabs","tabs","tabList","Object","keys","firstTab","lastTab","savedTab","initialTab","includes","changeTab","$tab","restore","key","tab","data","active","map","current","handler","click","prepend","visible","fn","typeRegexp","getType","typeString","prototype","call","match","exec","ObjectView","_","Value","rec","$props","store","remap","$value","$parentOpened","foldableClicked","$localOpened","createStore","on","opened","$opened","combine","parent","local","variant","source","cases","String","Number","BigInt","Boolean","Null","Undefined","Symbol","RegExp","$variantSource","$source","$flags","Function","ƒ","h","AsyncFunction","Window","passive","stop","capture","Date","toISOString","_date$toISOString","Array","clickable","prevent","list","parentOpened","Arguments","args","Set","set","values","Map","entries","$entryItem","$key","Error","$name","$message","$stack","error","stack","constructor","hidden","object","$errorEntry","__","$type","$entry","$entryKey","$entryValue","a","trimDomain","options","replace","kindSetting","textSetting","Logs","$logs","hotKeyClear","toggleKind","filterChanged","clearClicked","$kinds","$filterText","exist","toggled","filter","i","checked","change","event","currentTarget","_event$currentTarget","fields","$kind","$rawName","$payload","$datetime","$kindMatched","$textMatched","$visible","kind","$iso","$time","toLocaleTimeString","Stores","$stores","$list","$filter","$filteredList","searchWord","item","searchChanged","e","_e$currentTarget","Header","placeholder","Events","$events","Effects","$effects","sid","$inFlight","Files","$filesList","$files","files","sort","b","$hasFiles","length","fileSelected","fileCleanup","$currentFile","$hasSelectedFile","file","$noFileSelected","has","style","flexDirection","selected","$filteredFiles","Title","FileList","selectFile","sample","clock","target","FileItem","tabIndex","events","fromEntries","stores","effects","h4","Traces","$traces","trace","TraceTitle","time","TraceList","line","TraceLine","effect","$isVisible","togglePressed","clearPressed","showInspector","dragdrop","$inDrag","mouseDown","mouseMove","mouseUp","mousedown","document","addEventListener","removeEventListener","ref","setRef","$ref","node","Root","console","info","$blockRef","widthSetting","$width","width","val","$shift","dragStart","block","dragMove","getBoundingClientRect","right","clientX","correctWidth","shift","left","traces","logs","ctrlKey","keyCode","serialize","storeAdd","storeUpdated","eventAdd","eventTriggered","effectAdd","effectTriggered","traceStoreChange","traceEventTrigger","traceEffectRun","traceAdd","merge","traceFinished","$currentTrace","now","guard","queueMicrotask","moveTrace","stackTraces","newTrace","reset","payload","getState","mapped","history","params","safeParams","undefined","inFlight","fx","id","createRecordFx","createEffect","datetime","graphite","unit","traceEffect","createName","seq","unshift","step","compute","scope","argument","param","traceEvent","doneData","failData","traceStore","$store","updates","before","state","push","getLocFile","defaultConfig","_unit$defaultConfig","loc","_unit$defaultConfig$l","compositeName","path","join","forward","from","to","record","attached","effectRun","effectDone","done","effectFail","fail","root","createElement","classList","add","body","append","using","StyledRoot"],"mappings":"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"}