{"version":3,"file":"effector.umd.js","sources":["../../src/effector/collection.ts","../../src/effector/throw.ts","../../src/effector/region.ts","../../src/effector/createNode.ts","../../src/effector/kernel.ts","../../src/effector/naming.ts","../../src/effector/config.ts","../../src/effector/template.ts","../../src/effector/createUnit.ts","../../src/effector/tag.ts","../../src/effector/combine.ts","../../src/effector/defer.ts","../../src/effector/createEffect.ts","../../src/effector/merge.ts","../../src/effector/sample.ts","../../src/effector/fork/util.ts","../../src/effector/createWatch.ts","../../src/effector/observable.ts","../../src/effector/validate.ts","../../src/effector/getter.ts","../../src/effector/id.ts","../../src/effector/own.ts","../../src/effector/is.ts","../../src/effector/caller.ts","../../src/effector/step.ts","../../src/effector/stateRef.ts","../../src/effector/clearNode.ts","../../src/effector/subscription.ts","../../src/effector/forward.ts","../../src/effector/watch.ts","../../src/effector/split.ts","../../src/effector/fork/allSettled.ts","../../src/effector/attach.ts","../../src/effector/createApi.ts","../../src/effector/createDomain.ts","../../src/effector/fork/fork.ts","../../src/effector/fork/createScope.ts","../../src/effector/fromObservable.ts","../../src/effector/guard.ts","../../src/effector/fork/hydrate.ts","../../src/effector/restore.ts","../../src/effector/fork/scopeBind.ts","../../src/effector/fork/serialize.ts"],"sourcesContent":["export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value\n  template\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]}\n  meta?: {[name: string]}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value\n  a\n  b\n  c?\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  scope?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?, upsert?: boolean): void\nexport function launch(unit, payload?, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem(\n          'child',\n          page,\n          nextNode,\n          stack,\n          finalValue,\n          getForkPage(stack),\n        )\n      })\n      const forkPage = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = scope.sidValuesMap[sid]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args): [any[], any | void]\nexport function processArgsToConfig(\n  args,\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part, config = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport type {Store, Event, CommonUnit, Effect} from './unit.h'\n\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport type {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\nimport type {Template} from '../forest/index.h'\n\nexport const applyParentHook = (\n  source,\n  target,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind, unit, configA, configB?) => {\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const config = flattenConfig({\n    or: configB,\n    and: typeof configA === 'string' ? {name: configA} : configA,\n  })\n  const {parent = null, sid = null, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : upd => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event, op: string, fn, node) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?,\n  maybeConfig?,\n): Event<Payload> {\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  return Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, nameOrConfig, maybeConfig),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return eventOrFn.watch(payload => fn(store.getState(), payload))\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const derived = getMeta(store, 'derived')\n  const ignored = getMeta(store, 'serialize') === 'ignore'\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (!ignored) setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = list => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj,\n  config?: Config,\n  fn?: (upd) => any,\n) => {\n  const clone = isArray ? list => list.slice() : obj => ({...obj})\n  const defaultState = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value) => any\n  rj: (value) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value) => any\n    rj: (value) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import type {Unit} from './index.h'\nimport type {Effect} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add} from './collection'\n\nexport function createEffect<Payload, Done, Fail = Error>(\n  nameOrConfig,\n  maybeConfig?,\n): Effect<Payload, Done, Fail> {\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Payload, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        ({params, req, handler, args = [params]}, _, stack) => {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd = getParent(stack)\n          ? {params, req: {rs(data) {}, rj(data) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    // @ts-expect-error\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data) => void,\n  args,\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const onSettled =\n  (\n    params,\n    req: {\n      rs(_)\n      rj(_)\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  data =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      page: stack.page,\n      scope: getForkPage(stack),\n    })\n\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  own(source, [\n    createLinkNode(\n      clock,\n      target,\n      [\n        applyTemplate('sampleSourceLoader'),\n        mov({from: STACK, target: clockState}),\n        ...readAndFilter(hasSource),\n        read(sourceRef, true, batched),\n        ...filterNodes,\n        read(clockState),\n        filterType === 'fn' &&\n          userFnCall((src, _, {a}) => filter(src, a), true),\n        fn && userFnCall(callStackAReg),\n        applyTemplate('sampleSourceUpward', isUpward),\n      ],\n      method,\n      fn,\n    ),\n  ])\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key, value) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(values, (value, key) => {\n      assert(is.unit(key), 'Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return values\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = obj => (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => obj => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value) => value is Store<unknown>\nexport const event = is(EVENT) as (value) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value) => value is Domain\nexport const scope = is(SCOPE) as (value) => value is Scope\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = stack => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = unit => unit.parent\nexport const getForkPage = (val): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport {getMeta} from './getter'\n\nexport const isObject = value => typeof value === 'object' && value !== null\nexport const isFunction = value => typeof value === 'function'\n\nexport const isVoid = value => value === undefined\n\nexport const assertObject = value =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value,\n  method: string,\n  valueName: string,\n  reason: string,\n) =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (value, method: string, valueName: string) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag, Stack} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = (\n  type: 'compute' | 'mov',\n  data,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = ({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data, scope: {[key: string]}, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data, scope: {[key: string]}, stack: Stack)\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({fn}: {fn(data, scope: {[key: string]}, stack: Stack)}) =>\n  compute({fn, priority: EFFECT})\n\nexport const calc = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch, Stack} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any>,\n  {scope, params: ctx}: {scope: Scope; params?: unknown},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (!is.effect(start) && !is.event(start) && !is.store(start))\n    return Promise.reject(new Error('first argument accepts only effects, events and stores'))\n  const defer = createDefer()\n  //@ts-expect-error\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = [start]\n  const launchParams = [] as Array<{params: unknown; req: unknown} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value: unknown) {\n              //@ts-expect-error\n              defer.value = {status: 'done', value}\n            },\n            rj(value: unknown) {\n              //@ts-expect-error\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const rj = onSettled(params, req, false, anyway, stack)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {rs: onSettled(params, req, true, anyway, stack), rj},\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    //@ts-expect-error\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\n\nexport function createDomain(nameOrConfig, maybeConfig?): Domain {\n  const node = createNode({family: {type: DOMAIN}, regional: true})\n\n  const result = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  }\n\n  node.meta = initUnit(DOMAIN, result, nameOrConfig, maybeConfig)\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase()\n\n      const trigger = createNamedEvent(`on${tag}`)\n      result.hooks[lowerCaseTag] = trigger\n\n      const acc = new Set<any>()\n      result.history[`${lowerCaseTag}s`] = acc\n\n      trigger.create = res => {\n        launch(trigger, res)\n        return res\n      }\n      add(\n        getGraph(trigger).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      trigger.watch(data => {\n        own(result, [data])\n        acc.add(data)\n        if (!data.ownerSet) data.ownerSet = acc\n        if (!getParent(data)) data.parent = result\n      })\n      own(result, [trigger])\n\n      result[`onCreate${tag}`] = (hook: (data) => any) => {\n        forEach(acc, hook)\n        return trigger.watch(hook)\n      }\n      result[`create${tag}`] = result[lowerCaseTag] = (\n        nameOrConfig,\n        config?: Config,\n      ) => trigger(factory(nameOrConfig, {parent: result, or: config}))\n    },\n  )\n\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  return result\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?; handlers?},\n  optiionalConfig?: {values?; handlers?},\n) {\n  let config: {values?; handlers?} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (_, scope) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj, defaultState, config?) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit, {scope}: {scope?: Scope} = {}) {\n  assert(\n    scope || forkPage,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? params => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : params => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","add","result","id","nextNodeID","next","CROSSLINK","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","REG_A","VALUE","store","STORE","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","createEvent","nameOrConfig","maybeConfig","event","deprecate","oldPage","setCurrentPage","create","callCreate","Object","assign","graphite","initUnit","EVENT","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","currentSubscription","get","firstState","config","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","isFunction","updateFilter","defaultConfig","upd","_","b","read","a","mov","ignored","sid","setMeta","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","kind","EFFECT","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","handlerId","getType","scope_","handler_","onResolve","onSettled","onReject","ok","runFn","then","op","fx","savedFork","setForkPage","inFlight","serialize","x","pending","amount","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","traverseStores","root","visit","includes","normalizeValues","values","assertEach","callback","unsubscribe","observableSymbol","Symbol","observable","DOMAIN","SCOPE","SAMPLER","BARRIER","SAMPLE","effect","domain","removeItem","pos","indexOf","splice","push","subject","suggestion","console","graph","val","compositeName","idCount","nextUnitID","nextStepID","readSidRoot","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","assertTarget","targetField","cmd","batch","nextBarrierID","compute","run","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","ret","v","getPriority","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","sourceRef","isKernelCall","refsMap","sidValuesMap","sidIdMap","isFresh","needToAssign","flattenConfig","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","events","effects","domains","scopeFn","hookType","hooks","configA","configB","isDomain","unitId","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","sidechain","createSampling","clock","batched","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","filterRef","hasFilter","syncSourceState","readAndFilter","hasSource","src","isSourceStore","launchCase","scopeTargets","start","ctx","reject","parentFork","defers","launchUnits","launchParams","injected","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","parentDomain","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","createNamedEvent","acc","res","hook","scopeLinks","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","resolve","__","storeStack","storeNode","warnSerialize","resultScope","cloneOf","createScope","valuesSidMap","opts","observableItem","disposer","complete","greedy","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","savedForkPage","ignoredStores","ignore","onlyChanges","rawName","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","splitterNode","loc"],"mappings":"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"}