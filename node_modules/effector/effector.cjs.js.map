{"version":3,"file":"effector.cjs.js","sources":["effector/collection.ts","effector/throw.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/config.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork/util.ts","effector/createWatch.ts","effector/observable.ts","effector/validate.ts","effector/getter.ts","effector/id.ts","effector/own.ts","effector/is.ts","effector/caller.ts","effector/step.ts","effector/stateRef.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/split.ts","effector/fork/allSettled.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fork/fork.ts","effector/fork/createScope.ts","effector/fromObservable.ts","effector/guard.ts","effector/fork/hydrate.ts","effector/restore.ts","effector/fork/scopeBind.ts","effector/fork/serialize.ts"],"sourcesContent":["export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value\n  template\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]}\n  meta?: {[name: string]}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value\n  a\n  b\n  c?\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  scope?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?, upsert?: boolean): void\nexport function launch(unit, payload?, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem(\n          'child',\n          page,\n          nextNode,\n          stack,\n          finalValue,\n          getForkPage(stack),\n        )\n      })\n      const forkPage = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = scope.sidValuesMap[sid]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args): [any[], any | void]\nexport function processArgsToConfig(\n  args,\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part, config = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport type {Store, Event, CommonUnit, Effect} from './unit.h'\n\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport type {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\nimport type {Template} from '../forest/index.h'\n\nexport const applyParentHook = (\n  source,\n  target,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind, unit, configA, configB?) => {\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const config = flattenConfig({\n    or: configB,\n    and: typeof configA === 'string' ? {name: configA} : configA,\n  })\n  const {parent = null, sid = null, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : upd => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event, op: string, fn, node) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?,\n  maybeConfig?,\n): Event<Payload> {\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  return Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, nameOrConfig, maybeConfig),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return eventOrFn.watch(payload => fn(store.getState(), payload))\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const derived = getMeta(store, 'derived')\n  const ignored = getMeta(store, 'serialize') === 'ignore'\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (!ignored) setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = list => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj,\n  config?: Config,\n  fn?: (upd) => any,\n) => {\n  const clone = isArray ? list => list.slice() : obj => ({...obj})\n  const defaultState = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value) => any\n  rj: (value) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value) => any\n    rj: (value) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import type {Unit} from './index.h'\nimport type {Effect} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add} from './collection'\n\nexport function createEffect<Payload, Done, Fail = Error>(\n  nameOrConfig,\n  maybeConfig?,\n): Effect<Payload, Done, Fail> {\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Payload, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        ({params, req, handler, args = [params]}, _, stack) => {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd = getParent(stack)\n          ? {params, req: {rs(data) {}, rj(data) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    // @ts-expect-error\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data) => void,\n  args,\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const onSettled =\n  (\n    params,\n    req: {\n      rs(_)\n      rj(_)\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  data =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      page: stack.page,\n      scope: getForkPage(stack),\n    })\n\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  own(source, [\n    createLinkNode(\n      clock,\n      target,\n      [\n        applyTemplate('sampleSourceLoader'),\n        mov({from: STACK, target: clockState}),\n        ...readAndFilter(hasSource),\n        read(sourceRef, true, batched),\n        ...filterNodes,\n        read(clockState),\n        filterType === 'fn' &&\n          userFnCall((src, _, {a}) => filter(src, a), true),\n        fn && userFnCall(callStackAReg),\n        applyTemplate('sampleSourceUpward', isUpward),\n      ],\n      method,\n      fn,\n    ),\n  ])\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key, value) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(values, (value, key) => {\n      assert(is.unit(key), 'Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return values\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = obj => (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => obj => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value) => value is Store<unknown>\nexport const event = is(EVENT) as (value) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value) => value is Domain\nexport const scope = is(SCOPE) as (value) => value is Scope\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = stack => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = unit => unit.parent\nexport const getForkPage = (val): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport {getMeta} from './getter'\n\nexport const isObject = value => typeof value === 'object' && value !== null\nexport const isFunction = value => typeof value === 'function'\n\nexport const isVoid = value => value === undefined\n\nexport const assertObject = value =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value,\n  method: string,\n  valueName: string,\n  reason: string,\n) =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (value, method: string, valueName: string) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag, Stack} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = (\n  type: 'compute' | 'mov',\n  data,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = ({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data, scope: {[key: string]}, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data, scope: {[key: string]}, stack: Stack)\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({fn}: {fn(data, scope: {[key: string]}, stack: Stack)}) =>\n  compute({fn, priority: EFFECT})\n\nexport const calc = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch, Stack} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any>,\n  {scope, params: ctx}: {scope: Scope; params?: unknown},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (!is.effect(start) && !is.event(start) && !is.store(start))\n    return Promise.reject(new Error('first argument accepts only effects, events and stores'))\n  const defer = createDefer()\n  //@ts-expect-error\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = [start]\n  const launchParams = [] as Array<{params: unknown; req: unknown} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value: unknown) {\n              //@ts-expect-error\n              defer.value = {status: 'done', value}\n            },\n            rj(value: unknown) {\n              //@ts-expect-error\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const rj = onSettled(params, req, false, anyway, stack)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {rs: onSettled(params, req, true, anyway, stack), rj},\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    //@ts-expect-error\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\n\nexport function createDomain(nameOrConfig, maybeConfig?): Domain {\n  const node = createNode({family: {type: DOMAIN}, regional: true})\n\n  const result = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  }\n\n  node.meta = initUnit(DOMAIN, result, nameOrConfig, maybeConfig)\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase()\n\n      const trigger = createNamedEvent(`on${tag}`)\n      result.hooks[lowerCaseTag] = trigger\n\n      const acc = new Set<any>()\n      result.history[`${lowerCaseTag}s`] = acc\n\n      trigger.create = res => {\n        launch(trigger, res)\n        return res\n      }\n      add(\n        getGraph(trigger).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      trigger.watch(data => {\n        own(result, [data])\n        acc.add(data)\n        if (!data.ownerSet) data.ownerSet = acc\n        if (!getParent(data)) data.parent = result\n      })\n      own(result, [trigger])\n\n      result[`onCreate${tag}`] = (hook: (data) => any) => {\n        forEach(acc, hook)\n        return trigger.watch(hook)\n      }\n      result[`create${tag}`] = result[lowerCaseTag] = (\n        nameOrConfig,\n        config?: Config,\n      ) => trigger(factory(nameOrConfig, {parent: result, or: config}))\n    },\n  )\n\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  return result\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?; handlers?},\n  optiionalConfig?: {values?; handlers?},\n) {\n  let config: {values?; handlers?} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (_, scope) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj, defaultState, config?) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit, {scope}: {scope?: Scope} = {}) {\n  assert(\n    scope || forkPage,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? params => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : params => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","add","result","id","nextNodeID","next","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","store","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","createEvent","nameOrConfig","maybeConfig","event","deprecate","oldPage","setCurrentPage","create","callCreate","Object","assign","graphite","initUnit","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","currentSubscription","get","firstState","config","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","isFunction","updateFilter","defaultConfig","upd","_","b","read","a","mov","ignored","sid","setMeta","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","kind","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","handlerId","getType","scope_","handler_","onResolve","onSettled","onReject","ok","runFn","then","op","fx","savedFork","setForkPage","inFlight","serialize","x","pending","amount","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","traverseStores","root","visit","includes","normalizeValues","values","assertEach","callback","unsubscribe","observableSymbol","Symbol","observable","effect","domain","removeItem","pos","indexOf","splice","push","subject","suggestion","console","graph","val","compositeName","idCount","nextUnitID","nextStepID","readSidRoot","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","assertTarget","targetField","cmd","batch","nextBarrierID","compute","run","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","ret","v","getPriority","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","sourceRef","isKernelCall","refsMap","sidValuesMap","sidIdMap","isFresh","needToAssign","flattenConfig","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","events","effects","domains","scopeFn","hookType","hooks","configA","configB","isDomain","unitId","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","sidechain","createSampling","clock","batched","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","filterRef","hasFilter","syncSourceState","readAndFilter","hasSource","src","isSourceStore","launchCase","scopeTargets","start","ctx","reject","parentFork","defers","launchUnits","launchParams","injected","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","parentDomain","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","acc","res","hook","scopeLinks","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","resolve","__","storeStack","storeNode","warnSerialize","resultScope","cloneOf","createScope","valuesSidMap","opts","observableItem","disposer","complete","greedy","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","savedForkPage","ignoredStores","ignore","onlyChanges","rawName","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","splitterNode","loc"],"mappings":"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"}