{"version":3,"file":"effector.mjs","sources":["effector/collection.ts","effector/throw.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/config.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fromObservable.ts","effector/merge.ts","effector/sample.ts","effector/guard.ts","effector/restore.ts","effector/split.ts","effector/fork/allSettled.ts","effector/fork/util.ts","effector/fork/fork.ts","effector/fork/createScope.ts","effector/fork/hydrate.ts","effector/fork/scopeBind.ts","effector/fork/serialize.ts","effector/createWatch.ts","effector/observable.ts","effector/validate.ts","effector/getter.ts","effector/id.ts","effector/own.ts","effector/is.ts","effector/caller.ts","effector/step.ts","effector/stateRef.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts"],"sourcesContent":["export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value\n  template\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]}\n  meta?: {[name: string]}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value\n  a\n  b\n  c?\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  scope?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?, upsert?: boolean): void\nexport function launch(unit, payload?, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem(\n          'child',\n          page,\n          nextNode,\n          stack,\n          finalValue,\n          getForkPage(stack),\n        )\n      })\n      const forkPage = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = scope.sidValuesMap[sid]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args): [any[], any | void]\nexport function processArgsToConfig(\n  args,\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part, config = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport type {Store, Event, CommonUnit, Effect} from './unit.h'\n\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport type {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\nimport type {Template} from '../forest/index.h'\n\nexport const applyParentHook = (\n  source,\n  target,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind, unit, configA, configB?) => {\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const config = flattenConfig({\n    or: configB,\n    and: typeof configA === 'string' ? {name: configA} : configA,\n  })\n  const {parent = null, sid = null, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : upd => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event, op: string, fn, node) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?,\n  maybeConfig?,\n): Event<Payload> {\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  return Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, nameOrConfig, maybeConfig),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return eventOrFn.watch(payload => fn(store.getState(), payload))\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const derived = getMeta(store, 'derived')\n  const ignored = getMeta(store, 'serialize') === 'ignore'\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (!ignored) setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = list => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj,\n  config?: Config,\n  fn?: (upd) => any,\n) => {\n  const clone = isArray ? list => list.slice() : obj => ({...obj})\n  const defaultState = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value) => any\n  rj: (value) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value) => any\n    rj: (value) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import type {Unit} from './index.h'\nimport type {Effect} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add} from './collection'\n\nexport function createEffect<Payload, Done, Fail = Error>(\n  nameOrConfig,\n  maybeConfig?,\n): Effect<Payload, Done, Fail> {\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Payload, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        ({params, req, handler, args = [params]}, _, stack) => {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd = getParent(stack)\n          ? {params, req: {rs(data) {}, rj(data) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    // @ts-expect-error\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data) => void,\n  args,\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const onSettled =\n  (\n    params,\n    req: {\n      rs(_)\n      rj(_)\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  data =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      page: stack.page,\n      scope: getForkPage(stack),\n    })\n\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const rj = onSettled(params, req, false, anyway, stack)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {rs: onSettled(params, req, true, anyway, stack), rj},\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    //@ts-expect-error\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\n\nexport function createDomain(nameOrConfig, maybeConfig?): Domain {\n  const node = createNode({family: {type: DOMAIN}, regional: true})\n\n  const result = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  }\n\n  node.meta = initUnit(DOMAIN, result, nameOrConfig, maybeConfig)\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase()\n\n      const trigger = createNamedEvent(`on${tag}`)\n      result.hooks[lowerCaseTag] = trigger\n\n      const acc = new Set<any>()\n      result.history[`${lowerCaseTag}s`] = acc\n\n      trigger.create = res => {\n        launch(trigger, res)\n        return res\n      }\n      add(\n        getGraph(trigger).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      trigger.watch(data => {\n        own(result, [data])\n        acc.add(data)\n        if (!data.ownerSet) data.ownerSet = acc\n        if (!getParent(data)) data.parent = result\n      })\n      own(result, [trigger])\n\n      result[`onCreate${tag}`] = (hook: (data) => any) => {\n        forEach(acc, hook)\n        return trigger.watch(hook)\n      }\n      result[`create${tag}`] = result[lowerCaseTag] = (\n        nameOrConfig,\n        config?: Config,\n      ) => trigger(factory(nameOrConfig, {parent: result, or: config}))\n    },\n  )\n\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  return result\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  own(source, [\n    createLinkNode(\n      clock,\n      target,\n      [\n        applyTemplate('sampleSourceLoader'),\n        mov({from: STACK, target: clockState}),\n        ...readAndFilter(hasSource),\n        read(sourceRef, true, batched),\n        ...filterNodes,\n        read(clockState),\n        filterType === 'fn' &&\n          userFnCall((src, _, {a}) => filter(src, a), true),\n        fn && userFnCall(callStackAReg),\n        applyTemplate('sampleSourceUpward', isUpward),\n      ],\n      method,\n      fn,\n    ),\n  ])\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj, defaultState, config?) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch, Stack} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any>,\n  {scope, params: ctx}: {scope: Scope; params?: unknown},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (!is.effect(start) && !is.event(start) && !is.store(start))\n    return Promise.reject(new Error('first argument accepts only effects, events and stores'))\n  const defer = createDefer()\n  //@ts-expect-error\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = [start]\n  const launchParams = [] as Array<{params: unknown; req: unknown} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value: unknown) {\n              //@ts-expect-error\n              defer.value = {status: 'done', value}\n            },\n            rj(value: unknown) {\n              //@ts-expect-error\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key, value) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(values, (value, key) => {\n      assert(is.unit(key), 'Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return values\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?; handlers?},\n  optiionalConfig?: {values?; handlers?},\n) {\n  let config: {values?; handlers?} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (_, scope) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n  }\n  return resultScope\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit, {scope}: {scope?: Scope} = {}) {\n  assert(\n    scope || forkPage,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? params => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : params => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = obj => (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => obj => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value) => value is Store<unknown>\nexport const event = is(EVENT) as (value) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value) => value is Domain\nexport const scope = is(SCOPE) as (value) => value is Scope\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = stack => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = unit => unit.parent\nexport const getForkPage = (val): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport {getMeta} from './getter'\n\nexport const isObject = value => typeof value === 'object' && value !== null\nexport const isFunction = value => typeof value === 'function'\n\nexport const isVoid = value => value === undefined\n\nexport const assertObject = value =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value,\n  method: string,\n  valueName: string,\n  reason: string,\n) =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (value, method: string, valueName: string) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag, Stack} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = (\n  type: 'compute' | 'mov',\n  data,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = ({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data, scope: {[key: string]}, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data, scope: {[key: string]}, stack: Stack)\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({fn}: {fn(data, scope: {[key: string]}, stack: Stack)}) =>\n  compute({fn, priority: EFFECT})\n\nexport const calc = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data, scope: {[key: string]}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","add","result","id","nextNodeID","next","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","store","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","setStoreName","rawName","shortName","Object","assign","createName","path","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","createEvent","nameOrConfig","maybeConfig","event","deprecate","oldPage","setCurrentPage","create","callCreate","graphite","initUnit","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","currentSubscription","get","firstState","config","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","isFunction","updateFilter","defaultConfig","upd","_","b","read","a","mov","ignored","sid","setMeta","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createStoreObject","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","kind","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","handlerId","getType","scope_","handler_","onResolve","onSettled","onReject","ok","runFn","then","op","fx","savedFork","setForkPage","inFlight","serialize","x","pending","amount","attach","injected","effect","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","splice","parentDomain","createApi","setters","createDomain","history","hooks","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","acc","Set","res","ownerSet","hook","fromObservable","observable","observableItem","observableSymbol","subscribe","disposer","complete","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","sample","clock","batched","greedy","createSampling","guard","restore","domain","split","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","assertTarget","__","splitterSeq","values","caseNames","keys","compute","scopeTargets","String","launchCase","includes","lastValues","needBarrier","storeOrFn","updater","storeRef","caseName","splitterNode","allSettled","start","ctx","reject","parentFork","defers","launchUnits","launchParams","traverseStores","root","visit","normalizeValues","assertEach","fork","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","batch","resolve","storeStack","storeNode","sidIdMap","sidValuesMap","warnSerialize","resultScope","cloneOf","createScope","valuesSidMap","hydrate","traverseTarget","needToAssign","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","scopeBind","savedForkPage","console","ignoredStores","ignore","onlyChanges","createWatch","run","scopeLinks","push","indexOf","clearNode","callback","unsubscribe","Symbol","removeItem","pos","subject","suggestion","graph","val","compositeName","idCount","nextUnitID","nextStepID","readSidRoot","withFactory","loc","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","targetField","cmd","nextBarrierID","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","ret","v","getPriority","r","l","queue","ix","first","last","size","bucket","t","newForkPage","newPage","isGetState","sourceRef","isKernelCall","refsMap","isFresh","flattenConfig","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","events","effects","domains","scopeFn","forward","opts","hookType","configA","configB","isDomain","unitId","thru","observer","nativeTemplate","mapped","caller","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","sidechain","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","filterRef","hasFilter","syncSourceState","readAndFilter","hasSource","src","isSourceStore"],"mappings":"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"}